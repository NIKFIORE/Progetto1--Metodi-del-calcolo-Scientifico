{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import time\n",
        "from scipy.io import mmread\n",
        "\n",
        "class IterativeSolvers:\n",
        "    \"\"\"\n",
        "    Libreria di metodi iterativi per la risoluzione di sistemi lineari Ax = b\n",
        "    dove A è una matrice simmetrica e definita positiva.\n",
        "    \"\"\"\n",
        "\n",
        "    @staticmethod\n",
        "    def check_matrix_properties(A, x0, check_spd=True):\n",
        "        \"\"\"\n",
        "        Verifica le proprietà della matrice A richieste per i metodi iterativi.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        x0 (numpy.ndarray): Vettore iniziale\n",
        "        check_spd (bool): Se True, verifica che A sia definita positiva\n",
        "\n",
        "        Returns:\n",
        "        bool: True se tutte le proprietà sono soddisfatte, False altrimenti\n",
        "        \"\"\"\n",
        "        M, N = A.shape\n",
        "        L = len(x0)\n",
        "\n",
        "        if M != N:\n",
        "            print(\"La matrice A non è quadrata\")\n",
        "            return False\n",
        "        elif L != M:\n",
        "            print(\"Le dimensioni della matrice A non corrispondono alla dimensione del vettore iniziale x0\")\n",
        "            return False\n",
        "\n",
        "        # Verifica che A sia simmetrica\n",
        "        if not np.allclose(A, A.T):\n",
        "            print(\"La matrice A non è simmetrica\")\n",
        "            return False\n",
        "\n",
        "        # Verifica che A sia definita positiva (solo se richiesto)\n",
        "        if check_spd:\n",
        "            try:\n",
        "                # Tentativo di calcolare la fattorizzazione di Cholesky\n",
        "                np.linalg.cholesky(A)\n",
        "            except np.linalg.LinAlgError:\n",
        "                print(\"La matrice A non è definita positiva\")\n",
        "                return False\n",
        "\n",
        "        return True\n",
        "\n",
        "    @staticmethod\n",
        "    def convergence_check(A, x, b, tol):\n",
        "        \"\"\"\n",
        "        Verifica il criterio di convergenza ||Ax - b|| / ||b|| < tol.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        x (numpy.ndarray): Soluzione corrente\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        tol (float): Tolleranza\n",
        "\n",
        "        Returns:\n",
        "        bool: True se il criterio è soddisfatto, False altrimenti\n",
        "        float: Errore relativo\n",
        "        \"\"\"\n",
        "        residual = A @ x - b\n",
        "        norm_b = np.linalg.norm(b)\n",
        "\n",
        "        if norm_b == 0:\n",
        "            # Caso speciale: se ||b|| = 0, usiamo ||Ax - b|| < tol\n",
        "            rel_error = np.linalg.norm(residual)\n",
        "        else:\n",
        "            rel_error = np.linalg.norm(residual) / norm_b\n",
        "\n",
        "        return rel_error < tol, rel_error\n",
        "\n",
        "    @staticmethod\n",
        "    def jacobi(A, b, tol=1e-6, max_iter=20000):\n",
        "        \"\"\"\n",
        "        Metodo di Jacobi per la risoluzione di sistemi lineari.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        tol (float): Tolleranza per il criterio di arresto\n",
        "        max_iter (int): Numero massimo di iterazioni\n",
        "\n",
        "        Returns:\n",
        "        numpy.ndarray: Soluzione approssimata\n",
        "        int: Numero di iterazioni eseguite\n",
        "        float: Tempo di calcolo in secondi\n",
        "        float: Errore relativo finale\n",
        "        \"\"\"\n",
        "        n = len(b)\n",
        "        x0 = np.zeros(n)  # Vettore iniziale nullo\n",
        "\n",
        "        # Verifica proprietà della matrice\n",
        "        if not IterativeSolvers.check_matrix_properties(A, x0):\n",
        "            return None, 0, 0.0, float('inf')\n",
        "\n",
        "        # Verifica elementi diagonali non nulli\n",
        "        if np.any(np.diag(A) == 0):\n",
        "            print(\"Almeno un elemento della diagonale è nullo. Il metodo fallisce.\")\n",
        "            return None, 0, 0.0, float('inf')\n",
        "\n",
        "        # Estrazione delle matrici\n",
        "        D = np.diag(np.diag(A))\n",
        "        D_inv = np.diag(1.0 / np.diag(A))\n",
        "        B = D - A\n",
        "\n",
        "        x = np.copy(x0)\n",
        "        iterations = 0\n",
        "\n",
        "        start_time = time.time()\n",
        "        while iterations < max_iter:\n",
        "            x_new = D_inv @ (B @ x + b)\n",
        "\n",
        "            # Verifica convergenza\n",
        "            converged, rel_error = IterativeSolvers.convergence_check(A, x_new, b, tol)\n",
        "            if converged:\n",
        "                break\n",
        "\n",
        "            x = np.copy(x_new)\n",
        "            iterations += 1\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "\n",
        "        if iterations == max_iter:\n",
        "            print(f\"Il metodo di Jacobi non ha raggiunto la convergenza in {max_iter} iterazioni.\")\n",
        "\n",
        "        return x, iterations, elapsed_time, rel_error\n",
        "\n",
        "    @staticmethod\n",
        "    def gauss_seidel(A, b, tol=1e-6, max_iter=20000):\n",
        "        \"\"\"\n",
        "        Metodo di Gauss-Seidel per la risoluzione di sistemi lineari.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        tol (float): Tolleranza per il criterio di arresto\n",
        "        max_iter (int): Numero massimo di iterazioni\n",
        "\n",
        "        Returns:\n",
        "        numpy.ndarray: Soluzione approssimata\n",
        "        int: Numero di iterazioni eseguite\n",
        "        float: Tempo di calcolo in secondi\n",
        "        float: Errore relativo finale\n",
        "        \"\"\"\n",
        "        n = len(b)\n",
        "        x0 = np.zeros(n)  # Vettore iniziale nullo\n",
        "\n",
        "        # Verifica proprietà della matrice\n",
        "        if not IterativeSolvers.check_matrix_properties(A, x0):\n",
        "            return None, 0, 0.0, float('inf')\n",
        "\n",
        "        # Estrazione delle matrici necessarie\n",
        "        L = np.tril(A)\n",
        "        U = A - L\n",
        "\n",
        "        x = np.copy(x0)\n",
        "        iterations = 0\n",
        "\n",
        "        start_time = time.time()\n",
        "        while iterations < max_iter:\n",
        "            # Risolvere sistema triangolare inferiore\n",
        "            x_new = np.linalg.solve(L, b - U @ x)\n",
        "\n",
        "            # Verifica convergenza\n",
        "            converged, rel_error = IterativeSolvers.convergence_check(A, x_new, b, tol)\n",
        "            if converged:\n",
        "                break\n",
        "\n",
        "            x = np.copy(x_new)\n",
        "            iterations += 1\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "\n",
        "        if iterations == max_iter:\n",
        "            print(f\"Il metodo di Gauss-Seidel non ha raggiunto la convergenza in {max_iter} iterazioni.\")\n",
        "\n",
        "        return x, iterations, elapsed_time, rel_error\n",
        "\n",
        "    @staticmethod\n",
        "    def gradient_method(A, b, tol=1e-6, max_iter=20000):\n",
        "        \"\"\"\n",
        "        Metodo del Gradiente per la risoluzione di sistemi lineari.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        tol (float): Tolleranza per il criterio di arresto\n",
        "        max_iter (int): Numero massimo di iterazioni\n",
        "\n",
        "        Returns:\n",
        "        numpy.ndarray: Soluzione approssimata\n",
        "        int: Numero di iterazioni eseguite\n",
        "        float: Tempo di calcolo in secondi\n",
        "        float: Errore relativo finale\n",
        "        \"\"\"\n",
        "        n = len(b)\n",
        "        x0 = np.zeros(n)  # Vettore iniziale nullo\n",
        "\n",
        "        # Verifica proprietà della matrice\n",
        "        if not IterativeSolvers.check_matrix_properties(A, x0):\n",
        "            return None, 0, 0.0, float('inf')\n",
        "\n",
        "        x = np.copy(x0)\n",
        "        r = b - A @ x\n",
        "        p = np.copy(r)\n",
        "        iterations = 0\n",
        "\n",
        "        start_time = time.time()\n",
        "        while iterations < max_iter:\n",
        "            Ap = A @ p\n",
        "            alpha = (r.T @ r) / (p.T @ Ap)\n",
        "            x_new = x + alpha * p\n",
        "\n",
        "            # Verifica convergenza\n",
        "            converged, rel_error = IterativeSolvers.convergence_check(A, x_new, b, tol)\n",
        "            if converged:\n",
        "                break\n",
        "\n",
        "            r_new = r - alpha * Ap\n",
        "            beta = (r_new.T @ r_new) / (r.T @ r)\n",
        "            p = r_new + beta * p\n",
        "\n",
        "            x = x_new\n",
        "            r = r_new\n",
        "            iterations += 1\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "\n",
        "        if iterations == max_iter:\n",
        "            print(f\"Il metodo del Gradiente non ha raggiunto la convergenza in {max_iter} iterazioni.\")\n",
        "\n",
        "        return x, iterations, elapsed_time, rel_error\n",
        "\n",
        "    @staticmethod\n",
        "    def conjugate_gradient(A, b, tol=1e-6, max_iter=20000):\n",
        "        \"\"\"\n",
        "        Metodo del Gradiente Coniugato per la risoluzione di sistemi lineari.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        tol (float): Tolleranza per il criterio di arresto\n",
        "        max_iter (int): Numero massimo di iterazioni\n",
        "\n",
        "        Returns:\n",
        "        numpy.ndarray: Soluzione approssimata\n",
        "        int: Numero di iterazioni eseguite\n",
        "        float: Tempo di calcolo in secondi\n",
        "        float: Errore relativo finale\n",
        "        \"\"\"\n",
        "        n = len(b)\n",
        "        x0 = np.zeros(n)  # Vettore iniziale nullo\n",
        "\n",
        "        # Verifica proprietà della matrice\n",
        "        if not IterativeSolvers.check_matrix_properties(A, x0):\n",
        "            return None, 0, 0.0, float('inf')\n",
        "\n",
        "        x = np.copy(x0)\n",
        "        r = b - A @ x  # Residuo iniziale\n",
        "        p = np.copy(r)  # Direzione iniziale\n",
        "        iterations = 0\n",
        "\n",
        "        start_time = time.time()\n",
        "        while iterations < max_iter:\n",
        "            Ap = A @ p\n",
        "            r_dot_r = r.T @ r\n",
        "            alpha = r_dot_r / (p.T @ Ap)\n",
        "\n",
        "            x = x + alpha * p\n",
        "            r_new = r - alpha * Ap\n",
        "\n",
        "            # Verifica convergenza\n",
        "            converged, rel_error = IterativeSolvers.convergence_check(A, x, b, tol)\n",
        "            if converged:\n",
        "                break\n",
        "\n",
        "            beta = (r_new.T @ r_new) / r_dot_r\n",
        "            p = r_new + beta * p\n",
        "\n",
        "            r = r_new\n",
        "            iterations += 1\n",
        "\n",
        "        elapsed_time = time.time() - start_time\n",
        "\n",
        "        if iterations == max_iter:\n",
        "            print(f\"Il metodo del Gradiente Coniugato non ha raggiunto la convergenza in {max_iter} iterazioni.\")\n",
        "\n",
        "        return x, iterations, elapsed_time, rel_error\n",
        "\n",
        "    @staticmethod\n",
        "    def solve_system(A, b, x_exact, tol, method='all'):\n",
        "        \"\"\"\n",
        "        Risolve un sistema lineare con uno o tutti i metodi implementati.\n",
        "\n",
        "        Parametri:\n",
        "        A (numpy.ndarray): Matrice del sistema\n",
        "        b (numpy.ndarray): Termine noto\n",
        "        x_exact (numpy.ndarray): Soluzione esatta\n",
        "        tol (float): Tolleranza per il criterio di arresto\n",
        "        method (str): Metodo da utilizzare ('jacobi', 'gauss_seidel', 'gradient', 'conjugate_gradient', 'all')\n",
        "\n",
        "        Returns:\n",
        "        dict: Risultati dell'esecuzione di ogni metodo\n",
        "        \"\"\"\n",
        "        methods = {\n",
        "            'jacobi': IterativeSolvers.jacobi,\n",
        "            'gauss_seidel': IterativeSolvers.gauss_seidel,\n",
        "            'gradient': IterativeSolvers.gradient_method,\n",
        "            'conjugate_gradient': IterativeSolvers.conjugate_gradient\n",
        "        }\n",
        "\n",
        "        results = {}\n",
        "\n",
        "        if method == 'all':\n",
        "            for name, func in methods.items():\n",
        "                print(f\"\\nRisoluzione con metodo: {name}\")\n",
        "                x_approx, iterations, elapsed_time, rel_err = func(A, b, tol)\n",
        "\n",
        "                if x_approx is not None:\n",
        "                    rel_error_solution = np.linalg.norm(x_approx - x_exact) / np.linalg.norm(x_exact)\n",
        "                    results[name] = {\n",
        "                        'solution': x_approx,\n",
        "                        'iterations': iterations,\n",
        "                        'time': elapsed_time,\n",
        "                        'residual_error': rel_err,\n",
        "                        'solution_error': rel_error_solution\n",
        "                    }\n",
        "                    print(f\"Errore relativo: {rel_error_solution}\")\n",
        "                    print(f\"Iterazioni: {iterations}\")\n",
        "                    print(f\"Tempo di calcolo: {elapsed_time:.6f} sec\")\n",
        "        else:\n",
        "            if method in methods:\n",
        "                func = methods[method]\n",
        "                x_approx, iterations, elapsed_time, rel_err = func(A, b, tol)\n",
        "\n",
        "                if x_approx is not None:\n",
        "                    rel_error_solution = np.linalg.norm(x_approx - x_exact) / np.linalg.norm(x_exact)\n",
        "                    results[method] = {\n",
        "                        'solution': x_approx,\n",
        "                        'iterations': iterations,\n",
        "                        'time': elapsed_time,\n",
        "                        'residual_error': rel_err,\n",
        "                        'solution_error': rel_error_solution\n",
        "                    }\n",
        "                    print(f\"Errore relativo: {rel_error_solution}\")\n",
        "                    print(f\"Iterazioni: {iterations}\")\n",
        "                    print(f\"Tempo di calcolo: {elapsed_time:.6f} sec\")\n",
        "            else:\n",
        "                print(f\"Metodo '{method}' non riconosciuto.\")\n",
        "\n",
        "        return results\n",
        "\n",
        "    @staticmethod\n",
        "    def load_matrix_mtx(filename):\n",
        "        \"\"\"\n",
        "        Carica una matrice da un file .mtx.\n",
        "\n",
        "        Parametri:\n",
        "        filename (str): Percorso del file .mtx\n",
        "\n",
        "        Returns:\n",
        "        numpy.ndarray: Matrice caricata dal file\n",
        "        \"\"\"\n",
        "        try:\n",
        "            matrix = mmread(filename)\n",
        "            if isinstance(matrix, np.ndarray):\n",
        "                return matrix\n",
        "            else:\n",
        "                return matrix.toarray()  # Converti da formato sparse a numpy array\n",
        "        except Exception as e:\n",
        "            print(f\"Errore nel caricamento della matrice dal file {filename}: {e}\")\n",
        "            return None\n",
        "\n",
        "    @staticmethod\n",
        "    def run_tests(matrix_files, tolerances):\n",
        "        \"\"\"\n",
        "        Esegue test su più file di matrici con diverse tolleranze.\n",
        "\n",
        "        Parametri:\n",
        "        matrix_files (list): Lista di percorsi di file .mtx\n",
        "        tolerances (list): Lista di tolleranze da testare\n",
        "\n",
        "        Returns:\n",
        "        dict: Risultati per ogni matrice e tolleranza\n",
        "        \"\"\"\n",
        "        results = {}\n",
        "\n",
        "        for mtx_file in matrix_files:\n",
        "            print(f\"\\nCaricamento matrice: {mtx_file}\")\n",
        "            A = IterativeSolvers.load_matrix_mtx(mtx_file)\n",
        "\n",
        "            if A is None:\n",
        "                continue\n",
        "\n",
        "            n = A.shape[0]\n",
        "            # Step 1: Creare la soluzione esatta (vettore di tutti 1)\n",
        "            x_exact = np.ones(n)\n",
        "            # Step 2: Calcolare il vettore b\n",
        "            b = A @ x_exact\n",
        "\n",
        "            matrix_results = {}\n",
        "\n",
        "            for tol in tolerances:\n",
        "                print(f\"\\nTest con tolleranza: {tol}\")\n",
        "                matrix_results[tol] = IterativeSolvers.solve_system(A, b, x_exact, tol)\n",
        "\n",
        "            results[mtx_file] = matrix_results\n",
        "\n",
        "        return results"
      ],
      "metadata": {
        "id": "FJpaO2WZqhYD"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}